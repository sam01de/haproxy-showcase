global
    daemon
    user haproxy
    group haproxy
    pidfile /var/run/haproxy.pid
    
    # SSL/TLS Configuration
    ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets
    
    # Performance tuning
    nbproc 1
    maxconn 4096
    tune.ssl.default-dh-param 2048
    
    # Logging
    log 127.0.0.1:514 local0 info
    log-tag haproxy

defaults
    mode http
    timeout connect 5s
    timeout client 30s
    timeout server 30s
    timeout http-request 10s
    timeout http-keep-alive 10s
    
    # Error handling
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http
    
    # Compression
    compression algo gzip
    compression type text/html text/plain text/css text/javascript application/json application/javascript
    
    # Security headers
    http-response set-header X-Frame-Options DENY
    http-response set-header X-Content-Type-Options nosniff
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains"

# Main HTTPS frontend
frontend https_frontend
    bind *:443 ssl crt /etc/ssl/certs/example.com.pem
    bind *:80
    
    # Redirect HTTP to HTTPS
    redirect scheme https code 301 if !{ ssl_fc }
    
    # Rate limiting
    stick-table type ip size 100k expire 30s store http_req_rate(10s),http_err_rate(10s)
    http-request track-sc0 src
    http-request deny if { sc_http_req_rate(0) gt 20 }
    http-request deny if { sc_http_err_rate(0) gt 10 }
    
    # Security ACLs
    acl is_admin path_beg /admin
    acl is_api path_beg /api
    acl is_static path_beg /static /assets /images /css /js
    acl is_health path_exact /health
    acl is_maintenance path_beg /maintenance
    
    # IP whitelisting for admin
    acl admin_ips src 192.168.1.0/24 10.0.0.0/8
    acl bot_user_agent hdr_sub(User-Agent) -i bot spider crawler
    
    # Geographic blocking (example)
    acl blocked_countries hdr_sub(CF-IPCountry) -i CN RU
    
    # Maintenance mode
    acl maintenance_mode nbsrv(web_servers) eq 0
    
    # Request routing rules
    http-request deny if is_admin !admin_ips
    http-request deny if blocked_countries
    http-request deny if bot_user_agent is_api
    http-request return status 503 content-type text/html file /etc/haproxy/maintenance.html if maintenance_mode !is_health
    
    # Header manipulation
    http-request set-header X-Forwarded-Proto https if { ssl_fc }
    http-request set-header X-Forwarded-Port %[dst_port]
    http-request set-header X-Real-IP %[src]
    http-request del-header X-Forwarded-For
    http-request add-header X-Forwarded-For %[src]
    
    # Backend routing
    use_backend health_check if is_health
    use_backend static_files if is_static
    use_backend api_servers if is_api
    use_backend admin_servers if is_admin
    use_backend maintenance_page if maintenance_mode
    default_backend web_servers

# API Load Balancer
backend api_servers
    balance leastconn
    option httpchk GET /api/health
    http-check expect status 200
    
    # Circuit breaker pattern
    stick-table type ip size 1k expire 1m store http_err_rate(1m)
    http-request track-sc0 src
    http-request deny if { sc_http_err_rate(0) gt 5 }
    
    # Server definitions with different weights
    server api1 10.0.1.10:8080 check weight 100 maxconn 100
    server api2 10.0.1.11:8080 check weight 100 maxconn 100
    server api3 10.0.1.12:8080 check weight 50 maxconn 50 backup
    
    # Response manipulation
    http-response set-header Cache-Control "no-cache, no-store, must-revalidate"
    http-response set-header Expires "0"

# Web servers with sticky sessions
backend web_servers
    balance roundrobin
    cookie SERVERID insert indirect nocache
    option httpchk GET /health
    http-check expect status 200
    
    # Health check with custom headers
    option httpchk GET /health HTTP/1.1\r\nHost:\ example.com
    
    server web1 10.0.1.20:8080 check cookie web1 maxconn 200
    server web2 10.0.1.21:8080 check cookie web2 maxconn 200
    server web3 10.0.1.22:8080 check cookie web3 maxconn 200
    
    # Graceful shutdown
    server web4 10.0.1.23:8080 check cookie web4 maxconn 200 disabled

# Static file servers
backend static_files
    balance source
    option httpchk GET /ping
    
    # CDN-like behavior
    http-response set-header Cache-Control "public, max-age=3600"
    http-response set-header Vary "Accept-Encoding"
    
    server static1 10.0.1.30:8080 check
    server static2 10.0.1.31:8080 check
    server static3 10.0.1.32:8080 check backup

# Admin backend with enhanced security
backend admin_servers
    balance source
    option httpchk GET /admin/health
    
    # Additional security headers for admin
    http-response set-header X-Frame-Options SAMEORIGIN
    http-response set-header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'"
    
    server admin1 10.0.1.40:8080 check ssl verify none
    server admin2 10.0.1.41:8080 check ssl verify none backup

# Health check endpoint
backend health_check
    http-request return status 200 content-type text/plain string "OK"

# Maintenance page
backend maintenance_page
    http-request return status 503 content-type text/html file /etc/haproxy/maintenance.html

# Statistics and monitoring
listen stats
    bind *:8404
    stats enable
    stats uri /stats
    stats refresh 30s
    stats hide-version
    stats realm HAProxy\ Statistics
    stats auth admin:secure_password_here
    stats admin if TRUE
    
    # Custom CSS for stats page
    stats show-legends
    stats show-node
    
# Database connection pooling (TCP mode)
listen mysql_pool
    bind *:3306
    mode tcp
    balance leastconn
    option mysql-check user haproxy_check
    
    server mysql1 10.0.1.50:3306 check
    server mysql2 10.0.1.51:3306 check backup
    server mysql3 10.0.1.52:3306 check backup

# Redis cluster frontend
frontend redis_frontend
    bind *:6379
    mode tcp
    default_backend redis_cluster

backend redis_cluster
    mode tcp
    balance first
    option tcp-check
    tcp-check send PING\r\n
    tcp-check expect string +PONG
    
    server redis1 10.0.1.60:6379 check
    server redis2 10.0.1.61:6379 check
    server redis3 10.0.1.62:6379 check

# WebSocket support
frontend websocket_frontend
    bind *:8080
    
    # WebSocket upgrade detection
    acl is_websocket hdr(Upgrade) -i websocket
    acl is_websocket_conn hdr_sub(Connection) -i upgrade
    
    use_backend websocket_servers if is_websocket is_websocket_conn
    default_backend web_servers

backend websocket_servers
    balance source
    option httpchk GET /ws/health
    
    # WebSocket specific timeouts
    timeout tunnel 3600s
    timeout client 3600s
    timeout server 3600s
    
    server ws1 10.0.1.70:8080 check
    server ws2 10.0.1.71:8080 check
    server ws3 10.0.1.72:8080 check
